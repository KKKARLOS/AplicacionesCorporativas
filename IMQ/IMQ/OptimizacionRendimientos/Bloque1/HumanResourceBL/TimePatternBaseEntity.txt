using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using SII.Framework.Interfaces;
using CommonEntities = SII.HCD.Common.Entities;

namespace SII.HCD.BackOffice.Entities
{
    [DataContract]
    [Serializable]
    [KnownType(typeof(TimePatternEntity))]
    public class TimePatternBaseEntity : IStatusEntity, ICloneable
    {
        #region Properties
        [DataMember]
        public int ID { get; set; }

        [DataMember]
        public string Meaning { get; set; }

        [DataMember]
        public string Description { get; set; }

        [DataMember]
        public CommonEntities.StatusEnum Status { get; set; }

        [DataMember]
        public string ModifiedBy { get; set; }

        [DataMember]
        public DateTime LastUpdated { get; set; }

        [DataMember]
        public long DBTimeStamp { get; set; }

        [DataMember]
        public EditStatusEntity EditStatus { get; set; }
        #endregion

        #region Constructors
        public TimePatternBaseEntity() : this(0, String.Empty, String.Empty, CommonEntities.StatusEnum.None, String.Empty, DateTime.MinValue, 0) { }

        public TimePatternBaseEntity(int id, string description, string meaning, CommonEntities.StatusEnum status, string modifiedBy, DateTime lastUpdated, long dbTimeStamp)
        {
            ID = id;
            Description = description;
            DBTimeStamp = dbTimeStamp;
            LastUpdated = lastUpdated;
            ModifiedBy = modifiedBy;
            Status = status;
            Meaning = meaning;
            EditStatus = new EditStatusEntity();
        }
        #endregion

        #region ICloneable Members
        public virtual object Clone()
        {
            object clonedObject = null;
            MemoryStream ms = new MemoryStream();
            try
            {
                BinaryFormatter bf = new BinaryFormatter();

                bf.Serialize(ms, this);
                ms.Seek(0, SeekOrigin.Begin);
                clonedObject = bf.Deserialize(ms);
            }
            finally
            {
                ms.Close();
            }
            return clonedObject;
        }
        #endregion
    }
}