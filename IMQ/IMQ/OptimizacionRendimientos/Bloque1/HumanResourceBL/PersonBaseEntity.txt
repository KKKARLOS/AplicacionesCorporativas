using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Xml.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using SII.Framework.Interfaces;
using CommonEntities = SII.HCD.Common.Entities;

namespace SII.HCD.BackOffice.Entities
{
    [DataContract()]
    [Serializable()]
    public class PersonBaseEntity : IStatusEntity, ICloneable
    {
        #region Properties
        [DataMember()]
        public int ID { get; set; }
        [DataMember()]
        //[NotNullValidator()]
        //[StringLengthValidator(0, 50)]
        public String FirstName { get; set; }
        [DataMember()]
        //[NotNullValidator()]
        //[StringLengthValidator(0, 50)]
        public String LastName { get; set; }
        [DataMember()]
        //[StringLengthValidator(0, 50)]
        public String LastName2 { get; set; }
        [DataMember()]
        public CommonEntities.StatusEnum Status { get; set; }
        [DataMember()]
        public Int64 DBTimeStamp { get; set; }
        [DataMember()]
        public EditStatusEntity EditStatus { get; set; }

        [XmlIgnore]
        public string FullName
        {
            get
            {
                return CommonEntities.DescriptionBuilder.PersonBuildName(FirstName, LastName, LastName2);
            }
        }
        [XmlIgnore]
        public string FullName2
        {
            get
            {
                return CommonEntities.DescriptionBuilder.PersonBuildName(CommonEntities.PersonNameBuilderEnum.LastName_LastName2_Comma_FirstName, FirstName, LastName, LastName2);
            }
        }

        #endregion

        #region Constructors
        public PersonBaseEntity() : this(0, String.Empty, String.Empty, String.Empty, CommonEntities.StatusEnum.None, 0) { }

        public PersonBaseEntity(int id, string firstName, string lastName, string lastName2, CommonEntities.StatusEnum status, Int64 dbTimeStamp)
        {
            ID = id;
            FirstName = firstName;
            LastName = lastName;
            LastName2 = lastName2;
            Status = status;
            DBTimeStamp = dbTimeStamp;
            EditStatus = new EditStatusEntity();
        }
        #endregion

        #region ICloneable Members
        public virtual object Clone()
        {
            object clonedObject = null;
            MemoryStream ms = new MemoryStream();
            try
            {
                BinaryFormatter bf = new BinaryFormatter();

                bf.Serialize(ms, this);
                ms.Seek(0, SeekOrigin.Begin);
                clonedObject = bf.Deserialize(ms);
            }
            finally
            {
                ms.Close();
            }
            return clonedObject;
        }
        #endregion
    }
}
