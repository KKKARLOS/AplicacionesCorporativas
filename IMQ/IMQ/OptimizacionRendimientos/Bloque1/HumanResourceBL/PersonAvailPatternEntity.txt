using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using SII.Framework.Interfaces;
using CommonEntities = SII.HCD.Common.Entities;

namespace SII.HCD.BackOffice.Entities
{
    [DataContract()]
    [Serializable()]
    public class PersonAvailPatternEntity : IStatusEntity, ICloneable
    {
        #region Properties
        [DataMember()]
        public int ID { get; set; }
        [DataMember()]
        public CommonEntities.StatusEnum Status { get; set; }
        [DataMember()]
        public int PersonID { get; set; }
        [DataMember()]
        public int CareCenterID { get; set; }
        [DataMember()]
        public string CareCenterName { get; set; }
        [DataMember()]
        public AvailPatternEntity AvailabilityPattern { get; set; }
        [DataMember()]
        public bool IsDefault { get; set; }
        [DataMember()]
        public DateTime? StartAt { get; set; }
        [DataMember()]
        public DateTime? EndingIn { get; set; }
        [DataMember()]
        public DateTime LastUpdated { get; set; }
        [DataMember()]
        public string ModifiedBy { get; set; }
        [DataMember()]
        public Int64 DBTimeStamp { get; set; }
        [DataMember()]
        public EditStatusEntity EditStatus { get; set; }
        #endregion

        #region Constructors
        public PersonAvailPatternEntity() : this(0, 0, 0, string.Empty, null, false, CommonEntities.StatusEnum.None, null, null, DateTime.MinValue, String.Empty, 0) { }

        public PersonAvailPatternEntity(int id, int personID, int careCenterID, string careCenterName, AvailPatternEntity availabilityPattern, bool isDefault, CommonEntities.StatusEnum status,
            DateTime? startAt, DateTime? endingIn, DateTime lastUpdated, string modifiedBy, Int64 dbTimeStamp)
        {
            ID = id;
            PersonID = personID;
            CareCenterID = careCenterID;
            CareCenterName = careCenterName;
            AvailabilityPattern = availabilityPattern;
            IsDefault = isDefault;
            Status = status;
            StartAt = startAt;
            EndingIn = endingIn;
            LastUpdated = lastUpdated;
            ModifiedBy = modifiedBy;
            DBTimeStamp = dbTimeStamp;
            EditStatus = new EditStatusEntity();
        }
        #endregion

        #region ICloneable Members
        public virtual object Clone()
        {
            object clonedObject = null;
            MemoryStream ms = new MemoryStream();
            try
            {
                BinaryFormatter bf = new BinaryFormatter();

                bf.Serialize(ms, this);
                ms.Seek(0, SeekOrigin.Begin);
                clonedObject = bf.Deserialize(ms);
            }
            finally
            {
                ms.Close();
            }
            return clonedObject;
        }
        #endregion
    }
}
