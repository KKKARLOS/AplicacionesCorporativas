using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Xml.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using CommonEntities = SII.HCD.Common.Entities;

namespace SII.HCD.BackOffice.Entities
{
    [DataContract()]
    [Serializable()]
    public class PersonEntity : PersonBaseEntity, ICloneable
    {
        #region Properties
        [DataMember()]
        public AddressEntity Address { get; set; }
        [DataMember()]
        public AddressEntity Address2 { get; set; }
        [DataMember()]
        //[RegexValidator(@"^(([a-zA-Z][\w\.-]*[a-zA-Z0-9]@[a-zA-Z0-9][\w\.-]*[a-zA-Z0-9]\.[a-zA-Z][a-zA-Z\.]*[a-zA-Z])?)$")]
        [StringLengthValidator(0, 250)]
        public string EmailAddress { get; set; }
        [DataMember()]
        public PersonCategoryEntity[] Categories { get; set; }
        [DataMember()]
        public PersonIdentifierEntity[] Identifiers { get; set; }
        [DataMember()]
        public PersonTelephoneEntity[] Telephones { get; set; }
        [DataMember()]
        public int ImageID { get; set; }

        [DataMember()]
        public int DuplicateGroupID { get; set; }
        [DataMember()]
        public int RecordMerged { get; set; }
        [DataMember()]
        public string RecordMergedNames { get; set; }
        [DataMember()]
        public bool HasMergedRegisters { get; set; }
        [DataMember()]
        public string MergedRegisterNames { get; set; }

        [DataMember()]
        public byte[] ImageData { get; set; }

        [DataMember()]
        public bool AsUser { get; set; }
        [DataMember()]
        public string UserName { get; set; }

        [DataMember()]
        public SensitiveDataEntity SensitiveData { get; set; }
        [DataMember()]
        public DateTime RegistrationDate { get; set; }

        /// <summary>
        /// Estos atributos se utilizarán sólo y exclusivamente cuando se requiera disponer de múltiples nombres o alisar para esconder la información de un paciente
        /// </summary>
        public PersonAliasEntity[] PersonAliases { get; set; }
        public ExtendedNameEntity ExtendedName { get; set; }

        [XmlIgnore]
        public bool HasDuplicate { get { return DuplicateGroupID > 0; } }

        [XmlIgnore]
        public string FullExtendedName
        {
            get
            {
                return (ExtendedName != null)
                    ? CommonEntities.DescriptionBuilder.PersonBuildName(ExtendedName.Prefix, FirstName, LastName, ExtendedName.Patronymic, ExtendedName.Suffix)
                    : CommonEntities.DescriptionBuilder.PersonBuildName(FirstName, LastName, LastName2);
            }
        }

        [XmlIgnore]
        public Image Image
        {
            get
            {
                if ((ImageData == null) || (ImageData.Length == 0))
                    return null;

                MemoryStream ms = new MemoryStream(ImageData, 0, ImageData.Length);
                ms.Write(ImageData, 0, ImageData.Length);
                return System.Drawing.Image.FromStream(ms, true);
            }
        }
        #endregion

        #region Constructors
        public PersonEntity()
            : this(0, String.Empty, String.Empty, String.Empty, CommonEntities.StatusEnum.Active, 0, null, null,
                String.Empty, null, null, null, 0, 0, 0, false,
                false, string.Empty, null, DateTime.MinValue) { }

        public PersonEntity(int id, string firstName, string lastName, string lastName2, CommonEntities.StatusEnum status,
            Int64 dbTimeStamp, AddressEntity address, AddressEntity address2, String emailAddress,
            PersonCategoryEntity[] categories, PersonIdentifierEntity[] identifiers, PersonTelephoneEntity[] telephones,
            int imageID, int duplicateGroupID, int recordMerged, bool hasMergedRegisters,


            bool asUser, string userName, SensitiveDataEntity sensitiveData,
            DateTime registrationDate)
            : base(id, firstName, lastName, lastName2, status, dbTimeStamp)
        {
            Address = address;
            Address2 = address2;
            EmailAddress = emailAddress;
            Categories = categories;
            Identifiers = identifiers;
            Telephones = telephones;
            ImageID = imageID;
            DuplicateGroupID = duplicateGroupID;
            RecordMerged = recordMerged;
            HasMergedRegisters = hasMergedRegisters;
            AsUser = asUser;
            UserName = userName;
            SensitiveData = sensitiveData;
            RegistrationDate = registrationDate;
        }
        #endregion

        #region ICloneable Members
        public override object Clone()
        {
            object clonedObject = null;
            MemoryStream ms = new MemoryStream();
            try
            {
                BinaryFormatter bf = new BinaryFormatter();

                bf.Serialize(ms, this);
                ms.Seek(0, SeekOrigin.Begin);
                clonedObject = bf.Deserialize(ms);
            }
            finally
            {
                ms.Close();
            }
            return clonedObject;
        }
        #endregion

        #region Public methods
        public void LoadImage(Image imageToConvert, ImageFormat formatOfImage)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                imageToConvert.Save(ms, formatOfImage);

                ImageData = ms.ToArray();
                ImageID = 0;
            }
        }

        public void ClearImage()
        {
            ImageData = null;
            ImageID = 0;
        }

        public string GetDefaultTelephoneNumber()
        {
            if (Telephones != null)
            {
                return Telephones
                    .Where(tel => tel.Telephone != null)
                    .Select(tel => tel.Telephone.Telephone)
                    .FirstOrDefault();
            }
            return string.Empty;
        }
        #endregion
    }

    [DataContract()]
    public enum PersonFindTypeEnum
    {
        [EnumMember]
        Person = 0,
        [EnumMember]
        Customer = 1,
        [EnumMember]
        HHRR = 2,
        [EnumMember]
        NOK = 3,
        [EnumMember]
        ContactPerson = 4,
        [EnumMember]
        Physician = 5,
        //[EnumMember]
        //RequestingPhysician = 6
    }
}
	