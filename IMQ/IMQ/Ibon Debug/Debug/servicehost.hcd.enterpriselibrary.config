<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="securityConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings, Microsoft.Practices.EnterpriseLibrary.Security" requirePermission="true" />
    <section name="securityCryptographyConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Configuration.CryptographySettings, Microsoft.Practices.EnterpriseLibrary.Security.Cryptography" requirePermission="true" />
    <section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging" requirePermission="true" />
    <section name="exceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" requirePermission="true" />
    <section name="cachingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings, Microsoft.Practices.EnterpriseLibrary.Caching" requirePermission="true" />
    <section name="sifp.codeGenerators" type="SII.HCD.BackOffice.Services.Configuration.CodeProviderConfigurationSection, SII.HCD.BackOffice.Services, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
  </configSections>
  <securityConfiguration defaultAuthorizationInstance="SIFP Authorization Provider"
    defaultSecurityCacheInstance="">
    <authorizationProviders>
      <add type="SII.SIFP.Security.Direct.SIFPDirectAuthorizationProvider,SIFP.Security.Direct"
        name="SIFP Authorization Provider" />
    </authorizationProviders>
  </securityConfiguration>
  <securityCryptographyConfiguration>
    <symmetricCryptoProviders>
      <add name="SIFP" type="Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.SymmetricAlgorithmProvider, Microsoft.Practices.EnterpriseLibrary.Security.Cryptography"
        algorithmType="System.Security.Cryptography.RijndaelManaged, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
        protectedKeyFilename="cryptokey.key" protectedKeyProtectionScope="LocalMachine" />
    </symmetricCryptoProviders>
  </securityCryptographyConfiguration>
	<loggingConfiguration name="Logging Application Block" tracingEnabled="false"
   defaultCategory="General" logWarningsWhenNoCategoriesMatch="true">
		<listeners>
			<add source="HCDIS Services" formatter="Text Formatter" log="Application"
     machineName="" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging"
     traceOutputOptions="None" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging"
     name="Formatted EventLog TraceListener" />
      <add listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging"
        traceOutputOptions="None" type="SII.Framework.Logging.LOPD.LOPDTraceListener, SIFP.Logging.LOPD"
           name="LOPD Trace Listener" initializeData="" formatter="Text Formatter" />
		</listeners>
		<formatters>
			<add template="Timestamp: {timestamp}&#xD;&#xA;Message: {message}&#xD;&#xA;Category: {category}&#xD;&#xA;Priority: {priority}&#xD;&#xA;EventId: {eventid}&#xD;&#xA;Severity: {severity}&#xD;&#xA;Title:{title}&#xD;&#xA;Machine: {machine}&#xD;&#xA;Application Domain: {appDomain}&#xD;&#xA;Process Id: {processId}&#xD;&#xA;Process Name: {processName}&#xD;&#xA;Win32 Thread Id: {win32ThreadId}&#xD;&#xA;Thread Name: {threadName}&#xD;&#xA;Extended Properties: {dictionary({key} - {value}&#xD;&#xA;)}"
     type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging"
     name="Text Formatter" />
		</formatters>
		<categorySources>
			<add switchValue="All" name="CriticalError">
				<listeners>
					<add name="Formatted EventLog TraceListener" />
				</listeners>
			</add>
			<add switchValue="All" name="Diagnosis" />
			<add switchValue="Error" name="Error">
				<listeners>
					<add name="Formatted EventLog TraceListener" />
				</listeners>
			</add>
			<add switchValue="All" name="General">
				<listeners>
					<add name="Formatted EventLog TraceListener" />
				</listeners>
			</add>
      <add switchValue="All" name="Information">
        <listeners>
          <add name="Formatted EventLog TraceListener" />
        </listeners>
      </add>
      <add switchValue="All" name="Warning">
        <listeners>
          <add name="Formatted EventLog TraceListener" />
        </listeners>
      </add>
      <add switchValue="ActivityTracing" name="Trace" />
      <add switchValue="All" name="LOPDAudit">
        <listeners>
          <add name="LOPD Trace Listener" />
        </listeners>
      </add>
		</categorySources>
		<specialSources>
			<allEvents switchValue="All" name="All Events" />
			<notProcessed switchValue="All" name="Unprocessed Category" />
			<errors switchValue="All" name="Logging Errors &amp; Warnings" />
		</specialSources>
	</loggingConfiguration>
	<exceptionHandling>
		<exceptionPolicies>
			<add name="DataAccessPolicy">
				<exceptionTypes>
					<add type="System.Exception, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
       postHandlingAction="NotifyRethrow" name="Exception">
						<exceptionHandlers>
							<add logCategory="Error" eventId="100" severity="Error" title="Data Access Exception Handling"
         formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
         priority="0" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
         name="Logging Handler" />
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
			<add name="Default Policy">
				<exceptionTypes>
					<add type="System.Exception, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
       postHandlingAction="NotifyRethrow" name="Exception">
						<exceptionHandlers>
							<add logCategory="Error" eventId="100" severity="Error" title="Default Exception Handling"
         formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
         priority="0" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
         name="Logging Handler" />
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
			<add name="ServicePolicy">
				<exceptionTypes>
					<add type="System.Exception, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
       postHandlingAction="NotifyRethrow" name="Exception">
						<exceptionHandlers>
							<add logCategory="Error" eventId="100" severity="Error" title="Service Tier Exception Handling"
         formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
         priority="0" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
         name="Logging Handler" />
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
			<add name="UIPolicy">
				<exceptionTypes>
					<add type="System.Exception, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
       postHandlingAction="NotifyRethrow" name="Exception">
						<exceptionHandlers>
							<add logCategory="Error" eventId="100" severity="Error" title="UI Exception Handling"
         formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
         priority="0" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
         name="Logging Handler" />
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
		</exceptionPolicies>
	</exceptionHandling>
  <cachingConfiguration defaultCacheManager="Cache Manager">
    <cacheManagers>
      <add name="Cache Manager" type="Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager, Microsoft.Practices.EnterpriseLibrary.Caching"
        expirationPollFrequencyInSeconds="60" maximumElementsInCacheBeforeScavenging="1000"
        numberToRemoveWhenScavenging="10" backingStoreName="NullBackingStore" />
    </cacheManagers>
    <backingStores>
      <add type="Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore, Microsoft.Practices.EnterpriseLibrary.Caching"
        name="NullBackingStore" />
    </backingStores>
  </cachingConfiguration>
  <connectionStrings configSource="servicehost.hcd.connectionstrings.config" />
  <sifp.codeGenerators defaultProvider="default">
    <!-- defaultProvider is applied when an unespecidied instance of ICodeProvider is created-->
    <!-- if defaultProvider is not assigned, any provider named "default" will be applied-->
    <providers>
      <add name="default" mode="OnPost" type="SII.HCD.BackOffice.BL.CodeProvider.DBMaskedCodeGenerator, SII.HCD.BackOffice.BL"/>
    </providers>
  </sifp.codeGenerators>
</configuration>
